#!/bin/bash

CONFIG_DIR="/etc/hysteria"
SUBSCRIPTION_DB="$CONFIG_DIR/subscriptions.db"
CONFIG_FILE="$CONFIG_DIR/config.json"
SYSTEMD_SERVICE="/etc/systemd/system/hysteria-server.service"
API_IP=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Helper functions
log_info() { echo -e "${BLUE}ℹ${NC} $1"; }
log_success() { echo -e "${GREEN}✓${NC} $1"; }
log_error() { echo -e "${RED}❌${NC} $1"; }
check_command() { command -v "$1" >/dev/null 2>&1 || { log_error "Required command '$1' not found"; exit 1; }; }

# Initialize database
init_database() {
    check_command sqlite3
    sqlite3 "$SUBSCRIPTION_DB" <<EOF
CREATE TABLE IF NOT EXISTS subscriptions (
    name TEXT,
    key TEXT PRIMARY KEY,
    valid INTEGER NOT NULL,
    expiration TEXT NOT NULL,
    token TEXT NOT NULL
);
EOF
    log_success "Database initialized."
}

# Add subscription
add_subscription() {
    echo -e "\n\e[1;34mEnter subscription name:\e[0m"
    read -r name
    echo -e "\e[1;34mEnter key (or leave blank to generate):\e[0m"
    read -r key
    key=${key:-$(uuidgen)}
    echo -e "\e[1;34mEnter validity (days):\e[0m"
    read -r valid
    echo -e "\e[1;34mEnter expiration date (YYYY-MM-DD):\e[0m"
    read -r expiration
    token=$(uuidgen)
    response=$(curl -s -X POST "http://$API_IP:5000/pphdev/add" -H "Content-Type: application/json" -d "{\"name\":\"$name\",\"key\":\"$key\",\"valid\":$valid,\"expiration\":\"$expiration\",\"token\":\"$token\"}")
    if echo "$response" | grep -q '"status":"success"'; then
        log_success "Subscription $name added successfully."
    else
        log_error "Failed to add subscription: $response"
    fi
}

# Edit subscription
edit_subscription() {
    echo -e "\n\e[1;34mEnter key to edit:\e[0m"
    read -r key
    echo -e "\e[1;34mEnter new name:\e[0m"
    read -r name
    response=$(curl -s "http://$API_IP:5000/pphdev/update?key=$key&name=$name")
    if echo "$response" | grep -q '"status":"success"'; then
        log_success "Subscription name updated."
    else
        log_error "Failed to update subscription: $response"
    fi
}

# Delete subscription
delete_subscription() {
    echo -e "\n\e[1;34mEnter key to delete:\e[0m"
    read -r key
    response=$(curl -s "http://$API_IP:5000/pphdev/delete?key=$key")
    if echo "$response" | grep -q '"status":"success"'; then
        log_success "Subscription deleted."
    else
        log_error "Failed to delete subscription: $response"
    fi
}

# Set expiration
set_expiration() {
    echo -e "\n\e[1;34mEnter key to set expiration:\e[0m"
    read -r key
    echo -e "\e[1;34mEnter new expiration date (YYYY-MM-DD):\e[0m"
    read -r expiration
    response=$(curl -s "http://$API_IP:5000/pphdev/set_expiration?key=$key&expiration=$expiration")
    if echo "$response" | grep -q '"status":"success"'; then
        log_success "Expiration date updated."
    else
        log_error "Failed to update expiration: $response"
    fi
}

# Show subscriptions
show_subscriptions() {
    echo -e "\n\e[1;34mCurrent subscriptions:\e[0m"
    sqlite3 "$SUBSCRIPTION_DB" "SELECT name, key, valid, expiration FROM subscriptions;" | while IFS='|' read -r name key valid exp; do
        printf "\e[1;37mName: %-20s Key: %-36s Valid: %-3s Exp: %s\e[0m\n" "$name" "$key" "$valid" "$exp"
    done
}

# Restart server
restart_server() {
    systemctl restart hysteria-server
    log_success "Server restarted."
}

# Uninstall server
uninstall_server() {
    echo -e "\n\e[1;34mUninstalling PPHdev UDP server...\e[0m"
    systemctl stop hysteria-server pphdev-api
    systemctl disable hysteria-server pphdev-api
    rm -f "$SYSTEMD_SERVICE" "$API_SERVICE"
    systemctl daemon-reload
    rm -rf "$CONFIG_DIR" "$EXECUTABLE_INSTALL_PATH" "$API_SCRIPT" "$MANAGER_SCRIPT" "$SYMLINK_PATH"
    iptables -t nat -F PREROUTING 2>/dev/null
    ip6tables -t nat -F PREROUTING 2>/dev/null
    iptables-save > /etc/iptables/rules.v4 2>/dev/null
    ip6tables-save > /etc/iptables/rules.v6 2>/dev/null
    log_success "PPHdev UDP server uninstalled."
}

# Show banner
show_banner() {
    echo -e "\e[1;36m---------------------------------------------"
    echo " PPHdev VIP Manager"
    echo " (c) 2025 pphdev"
    echo " Telegram: @pphdev"
    echo "---------------------------------------------\e[0m"
}

# Show menu
show_menu() {
    echo -e "\e[1;36m----------------------------"
    echo " PPHdev VIP Manager"
    echo -e "----------------------------\e[0m"
    echo -e "\e[1;32m1. Add new subscription"
    echo "2. Edit subscription name"
    echo "3. Delete subscription"
    echo "4. Set expiration date"
    echo "5. Show subscriptions"
    echo "6. Restart server"
    echo "7. Uninstall server"
    echo -e "8. Exit\e[0m"
    echo -e "\e[1;36m----------------------------"
    echo -e "Enter your choice: \e[0m"
}

# Get API IP from config
get_api_ip() {
    API_IP=$(grep -oP 'API_IP=\K.*' /etc/hysteria/api_ip.txt 2>/dev/null)
    if [[ -z "$API_IP" ]]; then
        echo -e "\e[1;34mEnter API server IP:\e[0m"
        read -r API_IP
        echo "API_IP=$API_IP" > /etc/hysteria/api_ip.txt
    fi
}

# Initialize database
init_database
get_api_ip
show_banner
while true; do
    show_menu
    read -r choice
    case $choice in
        1) add_subscription ;;
        2) edit_subscription ;;
        3) delete_subscription ;;
        4) set_expiration ;;
        5) show_subscriptions ;;
        6) restart_server ;;
        7) uninstall_server; exit 0 ;;
        8) clear; exit 0 ;;
        *) echo -e "\e[1;31mInvalid choice. Please try again.\e[0m" ;;
    esac
done
